<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20224.22.1117.1841                               -->
<workbook original-version='18.1' source-build='2022.4.0 (20224.22.1117.1841)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Keword_cluster(Keword_cluster_test)' inline='true' name='federated.0dieefm05w45sj0zkjvcf06ciz0z' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Keword_cluster_test' name='excel-direct.1nn0v9p0gg464e1cxljic18367mu'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/User/Downloads/Keword_cluster_test.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1nn0v9p0gg464e1cxljic18367mu' name='Keword_cluster' table='[Keword_cluster$]' type='table'>
          <columns gridOrigin='A1:I1955:no:A1:I1955:0' header='yes' outcome='6'>
            <column datatype='string' name='_id' ordinal='0' />
            <column datatype='string' name='YNewsML.NewsContent.Title' ordinal='1' />
            <column datatype='string' name='YNewsML.NewsContent.Body' ordinal='2' />
            <column datatype='string' name='NamedEntity' ordinal='3' />
            <column datatype='string' name='Keyword' ordinal='4' />
            <column datatype='string' name='send_timestamp' ordinal='5' />
            <column datatype='string' name='Summarization' ordinal='6' />
            <column datatype='string' name='YNewsML.Metadata.Class.ClassCode' ordinal='7' />
            <column datatype='string' name='key+jaccard' ordinal='8' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1nn0v9p0gg464e1cxljic18367mu' name='Keword_cluster' table='[Keword_cluster$]' type='table'>
          <columns gridOrigin='A1:I1955:no:A1:I1955:0' header='yes' outcome='6'>
            <column datatype='string' name='_id' ordinal='0' />
            <column datatype='string' name='YNewsML.NewsContent.Title' ordinal='1' />
            <column datatype='string' name='YNewsML.NewsContent.Body' ordinal='2' />
            <column datatype='string' name='NamedEntity' ordinal='3' />
            <column datatype='string' name='Keyword' ordinal='4' />
            <column datatype='string' name='send_timestamp' ordinal='5' />
            <column datatype='string' name='Summarization' ordinal='6' />
            <column datatype='string' name='YNewsML.Metadata.Class.ClassCode' ordinal='7' />
            <column datatype='string' name='key+jaccard' ordinal='8' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:I1955:no:A1:I1955:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[_id]</local-name>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias>_id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LKO_RKR_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>YNewsML.NewsContent.Title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[YNewsML.NewsContent.Title]</local-name>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias>YNewsML.NewsContent.Title</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LKO_RKR_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>YNewsML.NewsContent.Body</remote-name>
            <remote-type>130</remote-type>
            <local-name>[YNewsML.NewsContent.Body]</local-name>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias>YNewsML.NewsContent.Body</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LKO_RKR_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NamedEntity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NamedEntity]</local-name>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias>NamedEntity</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LKO_RKR_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Keyword</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Keyword]</local-name>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias>Keyword</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LKO_RKR_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>send_timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[send_timestamp]</local-name>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias>send_timestamp</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LKO_RKR_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Summarization</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Summarization]</local-name>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias>Summarization</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LKO_RKR_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>YNewsML.Metadata.Class.ClassCode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[YNewsML.Metadata.Class.ClassCode]</local-name>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias>YNewsML.Metadata.Class.ClassCode</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LKO_RKR_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>key+jaccard</remote-name>
            <remote-type>130</remote-type>
            <local-name>[key+jaccard]</local-name>
            <parent-name>[Keword_cluster]</parent-name>
            <remote-alias>key+jaccard</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LKO_RKR_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='계산1' datatype='string' name='[Calculation_1439744571840360448]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;import ast&#13;&#10;&#13;&#10;data = _arg1&#13;&#10;return data&#13;&#10;&quot;, ATTR([NamedEntity]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Network_keyword' datatype='string' name='[Calculation_48413761931051010]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;import numpy as np&#13;&#10;import pandas as pd&#13;&#10;from mlxtend.preprocessing import TransactionEncoder&#13;&#10;from mlxtend.frequent_patterns import apriori, association_rules&#13;&#10;import ast&#13;&#10;import networkx as nx&#13;&#10;import matplotlib.pyplot as plt&#13;&#10;from apyori import apriori&#13;&#10;&#13;&#10;#data = list(_arg1)&#13;&#10;df = pd.DataFrame(&#13;&#10;    {&apos;_id&apos; : _arg1,&#13;&#10;    &apos;YNewsML.NewsContent.Title&apos; : _arg2,&#13;&#10;    &apos;YNewsML.NewsContent.Body&apos; : _arg3,&#13;&#10;    &apos;NamedEntity&apos; : _arg4,&#13;&#10;    &apos;Keyword&apos; : _arg5,&#13;&#10;    &apos;send_timestamp&apos; : _arg6,&#13;&#10;    &apos;Summarization&apos; : _arg7,&#13;&#10;    &apos;YNewsML.Metadata.Class.ClassCode&apos; : _arg8,&#13;&#10;    &apos;key+jaccard&apos; : _arg9,&#13;&#10;})&#13;&#10;&#13;&#10;&#13;&#10;cond1 = (df[&apos;key+jaccard&apos;] == &apos;이태원압사참사&apos;)&#13;&#10;df1 = df.loc[cond1]&#13;&#10;&#13;&#10;list_y = []&#13;&#10;for x in df1[&apos;NamedEntity&apos;]:&#13;&#10;    y = ast.literal_eval(x)&#13;&#10;    list_y.append(y)&#13;&#10;&#13;&#10;empty_list = []&#13;&#10;for i in range(len(list_y)):&#13;&#10;    empty_list2 = []&#13;&#10;    for j in range(len(list_y[i])):&#13;&#10;        empty_list2.append(list_y[i][j][&apos;word&apos;])&#13;&#10;    empty_list.append(empty_list2)&#13;&#10;&#13;&#10;result = list(apriori(empty_list, min_support = 0.03))&#13;&#10;df2 = pd.DataFrame(result)&#13;&#10;&#13;&#10;df2[&apos;length&apos;] = df2[&apos;items&apos;].apply(lambda x : len(x))&#13;&#10;df2 = df2[(df2[&apos;length&apos;] == 2) &amp; (df2[&apos;support&apos;] &gt;= 0.01)].sort_values(by = &apos;support&apos;, ascending = False) &#13;&#10;&#13;&#10;G = nx.Graph()&#13;&#10;ar = (df2[&apos;items&apos;])&#13;&#10;G.add_edges_from(ar)&#13;&#10;&#13;&#10;pr = nx.pagerank(G)&#13;&#10;nsize = np.array([v for v in pr.values()])&#13;&#10;nsize = 2000 * (nsize - min(nsize)) / (max(nsize) - min(nsize))&#13;&#10;&#13;&#10;pos = nx.kamada_kawai_layout(G)&#13;&#10;&#13;&#10;df_network = pd.DataFrame(pos)&#13;&#10;df_network = df_network.T.reset_index()&#13;&#10;return df_network[[&apos;index&apos;]].to_dict(orient=&apos;list&apos;)&#13;&#10;&quot;, ATTR([_id]), ATTR([YNewsML.NewsContent.Title]), ATTR([YNewsML.NewsContent.Body]), ATTR([NamedEntity]), ATTR([Keyword]), ATTR([send_timestamp]), ATTR([Summarization]), ATTR([YNewsML.Metadata.Class.ClassCode]), ATTR([key+jaccard]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Network_x' datatype='real' name='[Calculation_48413761954385926]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&quot;&#13;&#10;import numpy as np&#13;&#10;import pandas as pd&#13;&#10;from mlxtend.preprocessing import TransactionEncoder&#13;&#10;from mlxtend.frequent_patterns import apriori, association_rules&#13;&#10;import ast&#13;&#10;import networkx as nx&#13;&#10;import matplotlib.pyplot as plt&#13;&#10;from apyori import apriori&#13;&#10;&#13;&#10;df = _arg1&#13;&#10;#pd.read_csv(&apos;C:\Keword_cluster.csv&apos;, encoding = &apos;utf-8&apos;)&#13;&#10;&#13;&#10;cond1 = (df[&apos;key+jaccard&apos;] == &apos;이태원압사참사&apos;)&#13;&#10;df1 = df.loc[cond1]&#13;&#10;&#13;&#10;list_y = []&#13;&#10;for x in df1[&apos;NamedEntity&apos;]:&#13;&#10;    y = ast.literal_eval(x)&#13;&#10;    list_y.append(y)&#13;&#10;&#13;&#10;empty_list = []&#13;&#10;for i in range(len(list_y)):&#13;&#10;    empty_list2 = []&#13;&#10;    for j in range(len(list_y[i])):&#13;&#10;        empty_list2.append(list_y[i][j][&apos;word&apos;])&#13;&#10;    empty_list.append(empty_list2)&#13;&#10;&#13;&#10;result = list(apriori(empty_list, min_support = 0.03))&#13;&#10;df2 = pd.DataFrame(result)&#13;&#10;&#13;&#10;df2[&apos;length&apos;] = df2[&apos;items&apos;].apply(lambda x : len(x))&#13;&#10;df2 = df2[(df2[&apos;length&apos;] == 2) &amp; (df2[&apos;support&apos;] &gt;= 0.01)].sort_values(by = &apos;support&apos;, ascending = False) &#13;&#10;&#13;&#10;G = nx.Graph()&#13;&#10;ar = (df2[&apos;items&apos;])&#13;&#10;G.add_edges_from(ar)&#13;&#10;&#13;&#10;pr = nx.pagerank(G)&#13;&#10;nsize = np.array([v for v in pr.values()])&#13;&#10;nsize = 2000 * (nsize - min(nsize)) / (max(nsize) - min(nsize))&#13;&#10;&#13;&#10;pos = nx.kamada_kawai_layout(G)&#13;&#10;&#13;&#10;df_network = pd.DataFrame(pos)&#13;&#10;df_network = df_network.T.reset_index()&#13;&#10;Network_x = df_network[0].to_list()&#13;&#10;return Network_x&#13;&#10;&quot;, ATTR([NamedEntity]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Network_y' datatype='real' name='[Calculation_48413761955938312]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&quot;&#13;&#10;import numpy as np&#13;&#10;import pandas as pd&#13;&#10;from mlxtend.preprocessing import TransactionEncoder&#13;&#10;from mlxtend.frequent_patterns import apriori, association_rules&#13;&#10;import ast&#13;&#10;import networkx as nx&#13;&#10;import matplotlib.pyplot as plt&#13;&#10;from apyori import apriori&#13;&#10;&#13;&#10;df = _arg1&#13;&#10;#pd.read_csv(&apos;C:\Keword_cluster.csv&apos;, encoding = &apos;utf-8&apos;)&#13;&#10;&#13;&#10;cond1 = (df[&apos;key+jaccard&apos;] == &apos;이태원압사참사&apos;)&#13;&#10;df1 = df.loc[cond1]&#13;&#10;&#13;&#10;list_y = []&#13;&#10;for x in df1[&apos;NamedEntity&apos;]:&#13;&#10;    y = ast.literal_eval(x)&#13;&#10;    list_y.append(y)&#13;&#10;&#13;&#10;empty_list = []&#13;&#10;for i in range(len(list_y)):&#13;&#10;    empty_list2 = []&#13;&#10;    for j in range(len(list_y[i])):&#13;&#10;        empty_list2.append(list_y[i][j][&apos;word&apos;])&#13;&#10;    empty_list.append(empty_list2)&#13;&#10;&#13;&#10;result = list(apriori(empty_list, min_support = 0.03))&#13;&#10;df2 = pd.DataFrame(result)&#13;&#10;&#13;&#10;df2[&apos;length&apos;] = df2[&apos;items&apos;].apply(lambda x : len(x))&#13;&#10;df2 = df2[(df2[&apos;length&apos;] == 2) &amp; (df2[&apos;support&apos;] &gt;= 0.01)].sort_values(by = &apos;support&apos;, ascending = False) &#13;&#10;&#13;&#10;G = nx.Graph()&#13;&#10;ar = (df2[&apos;items&apos;])&#13;&#10;G.add_edges_from(ar)&#13;&#10;&#13;&#10;pr = nx.pagerank(G)&#13;&#10;nsize = np.array([v for v in pr.values()])&#13;&#10;nsize = 2000 * (nsize - min(nsize)) / (max(nsize) - min(nsize))&#13;&#10;&#13;&#10;pos = nx.kamada_kawai_layout(G)&#13;&#10;&#13;&#10;df_network = pd.DataFrame(pos)&#13;&#10;df_network = df_network.T.reset_index()&#13;&#10;Network_y = df_network[1].to_list()&#13;&#10;return Network_y&#13;&#10;&quot;, ATTR([NamedEntity]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Named Entity' datatype='string' name='[NamedEntity]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='Keword_cluster' datatype='table' name='[__tableau_internal_object_id__].[Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82]' role='measure' type='quantitative' />
      <column caption='_Id' datatype='string' name='[_id]' role='dimension' type='nominal' />
      <column caption='Key+Jaccard' datatype='string' name='[key+jaccard]' role='dimension' type='nominal' />
      <column caption='Send Timestamp' datatype='string' name='[send_timestamp]' role='dimension' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;대한민국&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Keword_cluster' id='Keword!cluster_DE979AB0702B4B7F8D12FDF25E624E82'>
            <properties context=''>
              <relation connection='excel-direct.1nn0v9p0gg464e1cxljic18367mu' name='Keword_cluster' table='[Keword_cluster$]' type='table'>
                <columns gridOrigin='A1:I1955:no:A1:I1955:0' header='yes' outcome='6'>
                  <column datatype='string' name='_id' ordinal='0' />
                  <column datatype='string' name='YNewsML.NewsContent.Title' ordinal='1' />
                  <column datatype='string' name='YNewsML.NewsContent.Body' ordinal='2' />
                  <column datatype='string' name='NamedEntity' ordinal='3' />
                  <column datatype='string' name='Keyword' ordinal='4' />
                  <column datatype='string' name='send_timestamp' ordinal='5' />
                  <column datatype='string' name='Summarization' ordinal='6' />
                  <column datatype='string' name='YNewsML.Metadata.Class.ClassCode' ordinal='7' />
                  <column datatype='string' name='key+jaccard' ordinal='8' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='시트 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='Keword_cluster(Keword_cluster_test)' name='federated.0dieefm05w45sj0zkjvcf06ciz0z' />
          </datasources>
          <datasource-dependencies datasource='federated.0dieefm05w45sj0zkjvcf06ciz0z'>
            <column caption='Network_keyword' datatype='string' name='[Calculation_48413761931051010]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;import numpy as np&#13;&#10;import pandas as pd&#13;&#10;from mlxtend.preprocessing import TransactionEncoder&#13;&#10;from mlxtend.frequent_patterns import apriori, association_rules&#13;&#10;import ast&#13;&#10;import networkx as nx&#13;&#10;import matplotlib.pyplot as plt&#13;&#10;from apyori import apriori&#13;&#10;&#13;&#10;#data = list(_arg1)&#13;&#10;df = pd.DataFrame(&#13;&#10;    {&apos;_id&apos; : _arg1,&#13;&#10;    &apos;YNewsML.NewsContent.Title&apos; : _arg2,&#13;&#10;    &apos;YNewsML.NewsContent.Body&apos; : _arg3,&#13;&#10;    &apos;NamedEntity&apos; : _arg4,&#13;&#10;    &apos;Keyword&apos; : _arg5,&#13;&#10;    &apos;send_timestamp&apos; : _arg6,&#13;&#10;    &apos;Summarization&apos; : _arg7,&#13;&#10;    &apos;YNewsML.Metadata.Class.ClassCode&apos; : _arg8,&#13;&#10;    &apos;key+jaccard&apos; : _arg9,&#13;&#10;})&#13;&#10;&#13;&#10;&#13;&#10;cond1 = (df[&apos;key+jaccard&apos;] == &apos;이태원압사참사&apos;)&#13;&#10;df1 = df.loc[cond1]&#13;&#10;&#13;&#10;list_y = []&#13;&#10;for x in df1[&apos;NamedEntity&apos;]:&#13;&#10;    y = ast.literal_eval(x)&#13;&#10;    list_y.append(y)&#13;&#10;&#13;&#10;empty_list = []&#13;&#10;for i in range(len(list_y)):&#13;&#10;    empty_list2 = []&#13;&#10;    for j in range(len(list_y[i])):&#13;&#10;        empty_list2.append(list_y[i][j][&apos;word&apos;])&#13;&#10;    empty_list.append(empty_list2)&#13;&#10;&#13;&#10;result = list(apriori(empty_list, min_support = 0.03))&#13;&#10;df2 = pd.DataFrame(result)&#13;&#10;&#13;&#10;df2[&apos;length&apos;] = df2[&apos;items&apos;].apply(lambda x : len(x))&#13;&#10;df2 = df2[(df2[&apos;length&apos;] == 2) &amp; (df2[&apos;support&apos;] &gt;= 0.01)].sort_values(by = &apos;support&apos;, ascending = False) &#13;&#10;&#13;&#10;G = nx.Graph()&#13;&#10;ar = (df2[&apos;items&apos;])&#13;&#10;G.add_edges_from(ar)&#13;&#10;&#13;&#10;pr = nx.pagerank(G)&#13;&#10;nsize = np.array([v for v in pr.values()])&#13;&#10;nsize = 2000 * (nsize - min(nsize)) / (max(nsize) - min(nsize))&#13;&#10;&#13;&#10;pos = nx.kamada_kawai_layout(G)&#13;&#10;&#13;&#10;df_network = pd.DataFrame(pos)&#13;&#10;df_network = df_network.T.reset_index()&#13;&#10;return df_network[[&apos;index&apos;]].to_dict(orient=&apos;list&apos;)&#13;&#10;&quot;, ATTR([_id]), ATTR([YNewsML.NewsContent.Title]), ATTR([YNewsML.NewsContent.Body]), ATTR([NamedEntity]), ATTR([Keyword]), ATTR([send_timestamp]), ATTR([Summarization]), ATTR([YNewsML.Metadata.Class.ClassCode]), ATTR([key+jaccard]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[Keyword]' role='dimension' type='nominal' />
            <column caption='Named Entity' datatype='string' name='[NamedEntity]' role='dimension' type='nominal' />
            <column datatype='string' name='[Summarization]' role='dimension' type='nominal' />
            <column datatype='string' name='[YNewsML.Metadata.Class.ClassCode]' role='dimension' type='nominal' />
            <column datatype='string' name='[YNewsML.NewsContent.Body]' role='dimension' type='nominal' />
            <column datatype='string' name='[YNewsML.NewsContent.Title]' role='dimension' type='nominal' />
            <column caption='_Id' datatype='string' name='[_id]' role='dimension' type='nominal' />
            <column caption='Key+Jaccard' datatype='string' name='[key+jaccard]' role='dimension' type='nominal' />
            <column-instance column='[NamedEntity]' derivation='None' name='[none:NamedEntity:nk]' pivot='key' type='nominal' />
            <column caption='Send Timestamp' datatype='string' name='[send_timestamp]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_48413761931051010]' derivation='User' name='[usr:Calculation_48413761931051010:nk]' pivot='key' type='nominal'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dieefm05w45sj0zkjvcf06ciz0z].[none:NamedEntity:nk]' />
              <lod column='[federated.0dieefm05w45sj0zkjvcf06ciz0z].[usr:Calculation_48413761931051010:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{1974FC55-D52B-41EB-98FB-2CA8AC122DCF}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' maximized='true' name='시트 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dieefm05w45sj0zkjvcf06ciz0z].[none:Keyword:nk]</field>
            <field>[federated.0dieefm05w45sj0zkjvcf06ciz0z].[none:NamedEntity:nk]</field>
            <field>[federated.0dieefm05w45sj0zkjvcf06ciz0z].[usr:Calculation_1439744571840360448:nk]</field>
            <field>[federated.0dieefm05w45sj0zkjvcf06ciz0z].[usr:Calculation_48413761931051010:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DB29B73C-D525-4322-816A-A5046E6905E6}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='시트 1' width='192'>
      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
      /D84ohnOJDALtgAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
